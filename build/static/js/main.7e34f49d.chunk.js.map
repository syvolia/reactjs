{"version":3,"sources":["ThreeScene.js","index.js"],"names":["ThreeScene","start","_this","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","y","freedomMesh","renderScene","window","renderer","render","scene","camera","width","this","mount","clientWidth","height","clientHeight","THREE","antialias","setClearColor","setSize","appendChild","domElement","position","z","OrbitControls","lights","set","add","addModels","_this2","geometry","material","color","load","texture","map","needsUpdate","xhr","console","log","loaded","total","error","mtlLoader","MTLLoader","setBaseUrl","materials","preload","objLoader","OBJLoader","setMaterials","object","setY","scale","removeChild","_this3","react_default","a","createElement","style","ref","Component","App","className","display","flexDirection","alignItems","src_ThreeScene","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.7e34f49d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { MTLLoader, OBJLoader } from \"three-obj-mtl-loader\";\nimport OrbitControls from \"three-orbitcontrols\";\n\nclass ThreeScene extends Component {\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    this.scene = new THREE.Scene();\n\n    //Add Renderer\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setClearColor(\"#ff0000\");\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement);\n\n    //add Camera\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 20;\n    this.camera.position.y = 5;\n\n    //Camera Controls\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    //LIGHTS\n    var lights = [];\n    lights[0] = new THREE.PointLight(0x304ffe, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n\n    //Simple Box with WireFrame\n    this.addModels();\n\n    this.renderScene();\n    //start animation\n    this.start();\n  }\n\n  addModels() {\n    // -----Step 1--------\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshBasicMaterial({\n      color: \"#ff0000\"\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n\n    // -----Step 2--------\n    //LOAD TEXTURE and on completion apply it on SPHERE\n    new THREE.TextureLoader().load(\n      \"https://images.pexels.com/photos/1089438/pexels-photo-1089438.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\",\n      texture => {\n        //Update Texture\n        this.cube.material.map = texture;\n        this.cube.material.needsUpdate = true;\n      },\n      xhr => {\n        //Download Progress\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      error => {\n        //Error CallBack\n        console.log(\"An error happened\" + error);\n      }\n    );\n\n    // -----Step 4--------\n    //Loading 3d Models\n    //Loading Material First\n    var mtlLoader = new MTLLoader();\n    mtlLoader.setBaseUrl(\"./assets/\");\n    mtlLoader.load(\"freedom.mtl\", materials => {\n      materials.preload();\n      console.log(\"Material loaded\");\n      //Load Object Now and Set Material\n      var objLoader = new OBJLoader();\n      objLoader.setMaterials(materials);\n      objLoader.load(\n        \"./assets/freedom.obj\",\n        object => {\n          this.freedomMesh = object;\n          this.freedomMesh.position.setY(3); //or  this\n          this.freedomMesh.scale.set(0.02, 0.02, 0.02);\n          this.scene.add(this.freedomMesh);\n        },\n        xhr => {\n          console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        error => {\n          console.log(\"An error happened\" + error);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    // -----Step 3--------\n    //Rotate Models\n    if (this.cube) this.cube.rotation.y += 0.01;\n    if (this.freedomMesh) this.freedomMesh.rotation.y += 0.01;\n\n    this.renderScene();\n    this.frameId = window.requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    if (this.renderer) this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"800px\", height: \"800px\" }}\n        ref={mount => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\nexport default ThreeScene;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ThreeScene from \"./ThreeScene\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      }}\n    >\n      \n      \n\n      <ThreeScene />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}